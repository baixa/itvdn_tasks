package org.example.algorithms.lesson_1;

import org.junit.jupiter.api.Assertions;

import java.util.Arrays;

/**
 *   Рассмотрим вычисление времени выполнения программ на основе алгоритма сортировки пузырьком. В данном случае, число элементов
 *  массива array [n] подлежащих сортировке служит мерой объема входных данных.
 *
 *  Все операторы присваивания имеют некоторое постоянное
 *  время выполнения, независящие от размера входных данных.
 *
 *  Операторы на строках (54) - (56) имеют время выполнения порядка O(1). Запись O(1) означает "равнозначно некой константе".
 *  В соответствии с правилом сумм время выполнения этой группы операторов равно O(max(1,1,1)) = O(1).
 *
 *  Поскольку операторы if и for вложены друг в друга, то оценку времени выполнения проводят от внутреннего
 *  оператора к внешнему, последовательно определяя время выполнения условного оператора в каждой итерации цикла. Для оператора if
 *  проверка логического условия занимает время порядка O(1). Таким образом время выполнения строк (52) - (57) имеет порядок O(1).
 *
 *  Группа операторов внутреннего цикла (строки (50) - (61) ). Общее времени выполнения операторов внутреннего цикла
 *  рассчитывается путем суммирования времени выполнения каждой итерации цикла. Для операторов (52) - (57) степень сложности на каждой
 *  итерации составляет O(1). Цикл выполняется n - i раз, по правилу произведений общее время выполнения цикла имеет порядок
 *  О((n-k) * 1), что равно О((n-k))
 *
 *  Время выполнения внешнего цикла (строки (48) - (59) ), который содержит все исполняемые операторы программы, рассчитывается путем
 *  суммирования времени выполнения каждой итерации внутреннего цикла и может быть выражено через сумму арифметической прогрессии:
 *                                                (2*a1 + (n-1)*d) / 2 * n,
 *  где a1 - первый член прогрессии, для данного случая (n-1);
 *      d - разность прогрессии, для данного случая -1;
 *      n - количество элементов.
 *
 *  Количество элементов массива в нашем примере равно 5, степень роста сложности можно описать прогрессией:
 *  (n - 1) + (n - 2) + (n - 3) + (n - 4) . Согласно формуле выше, время выполнения всей программы равно:
 *                                          T(n) = (2*(n-1) + (n-1)*(-1)) / 2 * n = n^2/2 ,
 *  степень сложности при этом равна О(n^2).
 *  Таким образом, программа сортировки пузырьком выполняется за время, пропорциональное квадрату числа элементов,
 *  подлежащих упорядочиванию.
 */
public class BubbleSort {

    /**
     * Sorts array using the bubble method
     *
     * @param array - Sortable array
     * @return - Sorted array
     */
    public static int[] sort(int[] array) {
        for (int i = 0; i < array.length - 1; i++) {
            for (int j = 0; j < array.length - i - 1; j++) {
                if (array[j] > array[j + 1]) {
                    int buffer = array[j];
                    array[j] = array[j + 1];
                    array[j + 1] = buffer;
                }
            }
        }

        return array;
    }

    public static void main(String[] args) {
        int[] array = new int[] {5, 4, 3, 2, 1};
        int[] sortedArray = sort(Arrays.copyOf(array, array.length));

        Assertions.assertArrayEquals(new int[]{1, 2, 3, 4, 5}, sortedArray);

        System.out.printf(
                "Source array = %s\nSorted array = %s",
                Arrays.toString(array),
                Arrays.toString(sortedArray)
        );
    }
}
